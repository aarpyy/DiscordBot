from collections.abc import MutableMapping, MutableSequence
from typing import Union, Coroutine, Callable, Any

class PrivateProfileError(Exception):
    _profile: Union[str, tuple[str, str]]
    def __init__(self, message: str = ..., *, profile: Union[str, tuple[str, str]]  = ...) -> None: ...
    @property
    def profile(self) -> Union[str, tuple[str, str]]: ...

class ProfileNotFoundError(Exception):
    _profile: Union[str, tuple[str, str]]
    def __init__(self, message: str = ..., *, profile: Union[str, tuple[str, str]] = ...) -> None: ...
    @property
    def profile(self) -> Union[str, tuple[str, str]]: ...

def restrict(users: list[str, ...] = ...) -> Callable[[Coroutine], Any]: ...
def jsonify(o: object) -> str: ...
def jsondump(obj: Union[MutableMapping, MutableSequence], indent: int = ...) -> str: ...